/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentation.Components;

import BLL.IObserver;
import Presentation.Components.ViewObjects.ViewObject;
import Presentation.MyConstants;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import static java.util.Collections.list;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Brobak
 */
public class ListPanel extends javax.swing.JPanel {

    JPanel lstTheList;
    ArrayList<IObserver> observers;
    ArrayList<ViewObject> vos;
    int mySelectedIndex;
    boolean enabled;
    JScrollPane jScrollPane1;
    JPanel panel;
    MyMouseMotionAdapter mma;
    /**
     * Creates new form ListPanel
     * @param editable
     */
    public ListPanel( boolean editable) {
        panel = new JPanel(new GridLayout(0, 1));
        jScrollPane1 = new JScrollPane(panel);
        enabled = true;
        mySelectedIndex = -1;
        initComponents();
        vos = new ArrayList();
        lstTheList = this;
        observers = new ArrayList();
        add(jScrollPane1, BorderLayout.CENTER);
        mma = new MyMouseMotionAdapter();
        jScrollPane1.addMouseListener(mma);
        addMouseMotionListener(mma);
        addMouseListener(mma);
        panel.addMouseMotionListener(mma);
        panel.addMouseListener(mma);
        jScrollPane1.addMouseMotionListener(mma);
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void populateTable() {
        
    }

    public void updateTable(ArrayList<ViewObject> viewObjects) {
        ArrayList<ViewObject> vos = viewObjects;
    }

//    /**
//     * Adds a cell renderer to the table coloums in tblResult
//     */
//    private void addCellRenderer() {
//        MyTableCellRenderer renderer = new MyTableCellRenderer();
//        
//        for(int col = 0; col < model.getColumnCount(); col ++){
//            TableColumn tc = tblList.getColumnModel().getColumn(col);
//            tc.setCellRenderer(renderer);
//        }
//    }
    /**
     * Adds a new ViewObject to the lst
     *
     * @param object the ViewObject you want to add to the list
     */
    public void addViewObject(ViewObject object) {
        object.addMouseMotionListener(mma);
        object.addMouseListener(mma);
        vos.add(object);
        panel.add(object);
        
    }

    private JPanel getCorectPanel(JTable table, Object value, boolean isSelected, int row) {
        ViewObject panel = (ViewObject) value;
        table.setRowHeight(row, (int) panel.getPreferredSize().getHeight());
        if (isSelected) {
            panel.setBackground(MyConstants.COLOR_LIGHT_BLUE);
        } else {
            panel.setBackground(Color.WHITE);
        }
        JPanel surroundPanel = new JPanel();
        surroundPanel.setLayout(new BorderLayout());
        surroundPanel.add(panel, BorderLayout.CENTER);
        surroundPanel.setBorder(new EmptyBorder(0, 0, 5, 0));
        return surroundPanel;
    }

    public ViewObject getSelectedViewObject() {
        if (mySelectedIndex == -1) {
            return null;
        } else {
            return vos.get(mySelectedIndex);
        }
    }

    public ArrayList<ViewObject> getAllViewObject() {
        return vos;
    }

    public void addSelectionObserver(IObserver observer) {
        observers.add(observer);
    }

    public void removeSelectionObserver(IObserver observer) {
        observers.remove(observer);
    }

    private void notifyObservers() {
        for (IObserver observer : observers) {
            observer.notifyObserver();
        }
    }

    public void clearList() {
        vos = new ArrayList();
    }

    public void setElementsEnabled(boolean b) {
        enabled = b;
    }
    
    private void setBackgroundColorOfAllElements(Color WHITE) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private class MyMouseMotionAdapter extends MouseAdapter {

        Point lastDragPoint = new Point();
        boolean beingDragged;
        
        @Override
        public void mouseClicked(MouseEvent e) {
            if (enabled) {
                mySelectedIndex = 0;
                if(getSelectedViewObject() != null)
                    notifyObservers();
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if (beingDragged) beingDragged = false;
        }
        
        @Override
        public void mouseDragged(MouseEvent e) {

            if (!beingDragged) {
                beingDragged = true;
                setLastDragPoint(e.getX(), (e.getY()+ ((JComponent)e.getSource()).getY()));
                System.out.println("" +e.getX()+" " + (e.getY()+ ((JComponent)e.getSource()).getY()));
            }
            handleDraging(e);
        }

        private void setLastDragPoint(int x, int y) {
            lastDragPoint.x = x;
            lastDragPoint.y = y;
        }

        private void handleDraging(MouseEvent e) {
            JViewport viewPort = jScrollPane1.getViewport();
            Point scrollPosition = viewPort.getViewPosition();

            int dy = (e.getY()+ ((JComponent)e.getSource()).getY()) - lastDragPoint.y;
            
            int maxScroll = viewPort.getViewSize().height - getHeight();
            scrollPosition.y -= dy;
            if (scrollPosition.y > maxScroll) scrollPosition.y = maxScroll;
            if (scrollPosition.y < 0) scrollPosition.y = 0;
            
            viewPort.setViewPosition(scrollPosition);
        }

        
    }
}
