/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentation.Components;

import BLL.IObserver;
import Presentation.Components.ViewObjects.ViewObject;
import Presentation.MyConstants;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author Brobak
 */
public class ListPanel extends javax.swing.JPanel{

    JPanel lstTheList;
    ArrayList<IObserver> observers;
    ArrayList<ViewObject> vos;
    int mySelectedIndex;
    boolean enabled;
    JScrollPane jScrollPane1;
    JPanel panel;
    MyMouseMotionAdapter mma;
    int width;
    boolean editAble;
    
    /**
     * creates a new listpanel to contain 
     * @param editable
     * @param width 
     */
    public ListPanel( boolean editable, int width) {
        this.width = width;
        panel = new JPanel();
        BoxLayout layout = new BoxLayout(panel, BoxLayout.Y_AXIS);
        this.editAble = editable;
        panel.setLayout(layout);
        jScrollPane1 = new JScrollPane(panel);
        enabled = true;
        mySelectedIndex = -1;
        initComponents();
        vos = new ArrayList();
        observers = new ArrayList();
        add(jScrollPane1, BorderLayout.CENTER);
        mma = new MyMouseMotionAdapter();
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void populateTable() {
        
    }
    
    /**
     * Adds a new ViewObject to the list, adding a border
     * @param object the ViewObject you want to add to the list
     */
    public void addViewObject(ViewObject object) {
        object.addMouseMotionListener(mma);
        object.addMouseListener(mma);
        object.setMaximumSize(new Dimension(width, (int) object.getPreferredSize().getHeight()));
        object.addObserver(new ViiewObjectObserver());
        vos.add(object);
        panel.add(object); 
    }
    
    /**
     * runs the refresh method on all viewobjects in the list.
     * used if an entity is changed and the text should be updated.
     * the viewobject need to do somthing with it though
     */
    public void refreshAllViewobjects(){
        for(ViewObject vo: vos){
            vo.refreshViewObject();
        }
    }

    /**
     * gets the curently selected view object
     * @return the selcted viewobject, if nothing is selected null is returned.
     */
    public ViewObject getSelectedViewObject() {
        if (mySelectedIndex == -1) {
            return null;
        } else {
            return vos.get(mySelectedIndex);
        }
    }

    /**
     * @return an arraylist with all the viewobjects in this list.
     */
    public ArrayList<ViewObject> getAllViewObject() {
        return vos;
    }

    /**
     * adds a new observer, which will be notified when the selection has changed.
     * @param observer the observer to add
     */
    public void addSelectionObserver(IObserver observer) {
        observers.add(observer);
    }

    /**
     * removes an observer, using the object refrence
     * @param observer the observer to remove
     */
    public void removeSelectionObserver(IObserver observer) {
        observers.remove(observer);
    }

    /**
     * notifies all observers, running the notify method.
     */
    private void notifyObservers() {
        for (IObserver observer : observers) {
            observer.notifyObserver();
        }
    }

    /**
     * clears the list of all viewobjects
     */
    public void clearList() {
        vos = new ArrayList();
        panel.removeAll();
    }

    /**
     * set whether or not elemts in the list can be selected.
     * @param b 
     */
    public void setElementsEnabled(boolean b) {
        enabled = b;
    }
    
    /**
     * sets the color of all the objects in the list. does not work if the view object
     * has many panel and does not overwrite the set background.
     * @param c the new color to set on the viewobjects
     */
    private void setBackgroundColorOfAllElements(Color c) {
            for(ViewObject vo: vos){
                vo.setBackground(c);
            }
    }
    
    /**
     * gets the index of a view object in the list.
     * @param viewObject the viewobject to search for
     * @return the index starting with 0.
     */
    private int getIndexOfObject(ViewObject viewObject) {
        for(int i = 0; i <vos.size(); i++){
            if(vos.get(i) == viewObject) return i;
        }
        return -1;
    }

    /**
     * @return the width that was passed in when the object was created
     */
    public int getMyWidth() {
        return width;
    }
    
    /**
     * this observer is added to all viewobjects, making them able to repaint the list
     * by notifying its observers.
     */
    private class ViiewObjectObserver implements IObserver{

        @Override
        public void notifyObserver() {
            ListPanel.this.validate();
            ListPanel.this.repaint();
        }
        
    }
    
    /**
     * this mouse adapter both hadles dragging and handles selecting
     */
    private class MyMouseMotionAdapter extends MouseAdapter {

        Point lastDragPoint = new Point();
        boolean beingDragged;
        
        /**
         * when the mouse is clicked the item that was clicked is selected.
         * @param e 
         */
        @Override
        public void mouseClicked(MouseEvent e) {
            if (enabled) {
                mySelectedIndex = getIndexOfObject((ViewObject) e.getSource());
                setBackgroundColorOfAllElements(Color.WHITE);
                ViewObject selected = getSelectedViewObject();
                if(selected != null)
                    selected.setBackground(MyConstants.COLOR_LIGHT_BLUE);
                    notifyObservers();
            }
        }

        /**
         * when the mouse is released the dragging is stopped
         * @param e 
         */
        @Override
        public void mouseReleased(MouseEvent e) {
            if (beingDragged) beingDragged = false;
        }
        
        /**
         * listens for drags and starts the dragging by setting the start position
         * afterwards it just handles dragging
         * @param e 
         */
        @Override
        public void mouseDragged(MouseEvent e) {

            if (!beingDragged) {
                beingDragged = true;
                setLastDragPoint(e.getX(), (e.getY()+ ((JComponent)e.getSource()).getY()));
            }
            handleDraging(e);
        }

        /**
         * sets the startpoint of the drag
         * @param x the x point of the drag
         * @param y the y point of the start drag position.
         */
        private void setLastDragPoint(int x, int y) {
            lastDragPoint.x = x;
            lastDragPoint.y = y;
        }

        /**
         * handles dragging, calculating the diference between the current point
         * and the start point, then moving the scroll pan in the apropriate direction
         * the appropriate distance.
         * @param e 
         */
        private void handleDraging(MouseEvent e) {
            JViewport viewPort = jScrollPane1.getViewport();
            Point scrollPosition = viewPort.getViewPosition();

            int dy = (e.getY()+ ((JComponent)e.getSource()).getY()) - lastDragPoint.y;
            
            int maxScroll = viewPort.getViewSize().height - getHeight();
            scrollPosition.y -= dy;
            if (scrollPosition.y > maxScroll) scrollPosition.y = maxScroll;
            if (scrollPosition.y < 0) scrollPosition.y = 0;
            
            viewPort.setViewPosition(scrollPosition);
        }

    }
}
