/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Presentation.Components;

import BE.Alarm;
import BE.Time_Sheet;
import BLL.Alarm_AccessLink;
import BLL.IObserver;
import BLL.TimeSheet_AccessLink;
import Presentation.Components.ViewObjects.ViewObjectAlarm;
import Presentation.Components.ViewObjects.ViewObjectCar;
import Presentation.Components.ViewObjects.ViewObjectFactory;
import Presentation.Components.ViewObjects.ViewObjectPosition;
import Presentation.Components.ViewObjects.ViewObjectTime;
import Presentation.Frames.MainFrame;
import Presentation.MyConstants;
import java.awt.BorderLayout;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Poul Nielsen
 */
public class AproveTimeSheet extends javax.swing.JPanel {
    TimeSheet_AccessLink tsa;
    Alarm_AccessLink aal;
    ViewObjectFactory vof;
    TabView tv;
    MainFrame parent;
    ListPanel alarmList, timeSheetList;
    myObserverListener myObserver;
    ArrayList<Alarm> openAlarms; 
    /**
     * Creates new form AproveTimeSheet
     * @param parent
     */
    public AproveTimeSheet(MainFrame parent, int firemanId) {
        initComponents();
        setLayout(new BorderLayout());
        this.parent = parent;
        myObserver = new myObserverListener();
        openAlarms = new ArrayList<>();
        try {
            tsa = new TimeSheet_AccessLink();
            aal = new Alarm_AccessLink();
            vof = new ViewObjectFactory();
        } catch (IOException ex) {
          
        }
        createTabs(firemanId);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 755, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 593, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void createTabs(int firemanId)
    {
        alarmList = getAlarmByFiremanId(firemanId);
        alarmList.addSelectionObserver(myObserver);
        
        tv = new TabView();
        tv.addNewTab("alarm", alarmList, parent.getWidth());
        
        add(tv, BorderLayout.CENTER);
        validate();
        repaint();
    }
    
    protected ListPanel getAlarmByFiremanId(int firemanId)
    {
        ArrayList<Time_Sheet> timeSheet = new ArrayList<Time_Sheet>();
        ListPanel list = new ListPanel();
        ArrayList<Alarm> alarms = new ArrayList<Alarm>();
        try{
            timeSheet = tsa.getTimeSheetsbyFiremanId(firemanId);
            
            for(Time_Sheet c : timeSheet)
            {
                alarms.add(aal.getAlarmById(c.getAlarmID()));
            }
       
        }catch(SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database call error: " + ex);
        }
        for(Alarm a : alarms){
                list.addViewObject(vof.getViewObject(a));
            }
        
        return list;
    }
    
    private ListPanel getTimeSheetByAlarmId(int alarmId)
    {
        ArrayList<Time_Sheet> timeSheet = new ArrayList<Time_Sheet>();
        
        //timeSheet = tsa.getDataForAproval(alarmId);
        
        ListPanel list = new ListPanel();
        System.out.println(" " + alarmId);
        return list;
    }
    
    
  
    
    private class myObserverListener implements IObserver{

        @Override
        public void notifyObserver() {
            
        if(alarmList.getSelectedViewObject().getClass() == ViewObjectAlarm.class)
        {
            ViewObjectAlarm voa = (ViewObjectAlarm)alarmList.getSelectedViewObject();
            
            Alarm alarm = voa.getAlarm();
            
            String alarmTitle = voa.getAlarm().getDistination();
            if(!openAlarms.contains(alarm))
            {
                timeSheetList = getTimeSheetByAlarmId(alarm.getID());
                tv.addNewTab(alarmTitle, timeSheetList, parent.getWidth());
                tv.setSelectedComponent(timeSheetList);
                openAlarms.add(alarm);
            }
            
        }
        }
        
    }
    
}

